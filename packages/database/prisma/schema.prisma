generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  emailVerified DateTime?
  role          Role
  accounts      Account[]
  profile       Profile?
  sessions      Session[]
}

model Account {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.ObjectId
  accountType AccountType
  googleId    String?     @unique
  password    String?
  salt        String?
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  expiresAt DateTime @map("expires_at")
}

model Profile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @unique @db.ObjectId
  displayName String?
  imageId     String?
  image       String?
  bio         String  @default("")
}

model Collection {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  databases Database[] @relation("CollectionDatabases")
}

model Database {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @unique
  collection   Collection    @relation(fields: [collectionId], references: [id], onDelete: Cascade, name: "CollectionDatabases")
  collectionId String        @db.ObjectId
  columnOrders ColumnOrder[] @relation("DatabaseColumnOrder")
  rowOrders    RowOrder[]    @relation("DatabaseRowOrder")
}

model ColumnOrder {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  database     Database @relation(fields: [databaseId], references: [id], onDelete: Cascade, name: "DatabaseColumnOrder")
  databaseId   String   @db.ObjectId
  name         String
  type         String
  relationLink Json? //{databaseID: string, columnID: string, columnName: string, type : 'one_to_one' || 'one_to_many'} //The column type should only allow string, number, or similar types because we need to provide the ability to preview it when entering data
  deafult      Boolean // We do not allow the ability to delete the default property, but we do allow renaming it. The default property will store the row count order.
  order        Int

  @@unique([databaseId, name])
}

model RowOrder {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  rowData    RowData[] @relation("DatabaseRowData")
  database   Database  @relation(fields: [databaseId], references: [id], onDelete: Cascade, name: "DatabaseRowOrder")
  order      Int
  databaseId String    @db.ObjectId
}

model RowData {
  id      String          @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  type    RowPropertyType
  content Json

  RowOrder   RowOrder? @relation(fields: [rowOrderId], references: [id], onDelete: Cascade, name: "DatabaseRowData")
  rowOrderId String?   @db.ObjectId

  createdAt DateTime
  updatedAt DateTime
}

// model RowProperty {
//   id         String          @id @default(auto()) @map("_id") @db.ObjectId
//   name       String
//   type       RowPropertyType
//   content    Json // Stores dynamic content in JSON format, varies based on type
//   rowOrder   Int
//   database   Database        @relation(fields: [databaseId], references: [id], onDelete: Cascade, name: "DatabaseRows")
//   databaseId String          @db.ObjectId
// }

model GodAccessToken {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  token             String   @unique
  dataAccessLevel   String[] //collection,database,dbquery,user
  actionAccessLevel String[] //GET,POST,PUT,DELETE
}

model TableAccessToken {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  token             String   @unique
  tableAccess       String
  actionAccessLevel String[]
}

model WebHook {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  webUrl      String
  tableAccess String
}

enum AccountType {
  EMAIL
  GOOGLE
  GITHUB
}

enum Role {
  God
  Entry
}

enum RowPropertyType {
  Text
  Attachment
  RichText
  Number
  Boolean
  Tags
  Calendar
  Relation
}
